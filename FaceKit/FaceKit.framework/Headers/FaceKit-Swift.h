// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import SceneKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;


/// An instance of the FKAvatarClothes class implements a clothes on the avatar. You can use this class to wear clothes, such as those you might let your avatar in clothes.
SWIFT_CLASS("_TtC7FaceKit15FKAvatarClothes")
@interface FKAvatarClothes : NSObject <NSSecureCoding, NSCoding>

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the receiver using a given archiver.
- (void)encodeWithCoder:(NSCoder * __nonnull)aCoder;

/// Returns the class supports secure coding.
+ (BOOL)supportsSecureCoding;

/// Get the name of avatar's clothes.
- (NSString * __nonnull)name;
@end



/// An instance of the FKAvatarGlasses class implements a glasses on the avatar. You can use this class to wear glasses, such as those you might let your avatar in glesses.
SWIFT_CLASS("_TtC7FaceKit15FKAvatarGlasses")
@interface FKAvatarGlasses : NSObject <NSSecureCoding, NSCoding>

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the receiver using a given archiver.
- (void)encodeWithCoder:(NSCoder * __nonnull)aCoder;

/// Returns the class supports secure coding.
+ (BOOL)supportsSecureCoding;

/// Get the name of avatar's clothes.
- (NSString * __nonnull)name;
@end



/// An instance of the FKAvatarHair class implements a hair on the avatar. You can use this class to hair design, such as those you might dress up your hair.
SWIFT_CLASS("_TtC7FaceKit12FKAvatarHair")
@interface FKAvatarHair : NSObject <NSSecureCoding, NSCoding>

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the receiver using a given archiver.
- (void)encodeWithCoder:(NSCoder * __nonnull)aCoder;

/// Returns the class supports secure coding.
+ (BOOL)supportsSecureCoding;

/// Get the name of avatar's hair.
- (NSString * __nonnull)name;
@end



/// An FKAvatarManager object lets you create a scene node, including a avatar. An avatar manager object is usually your first interaction with the scene node.
SWIFT_CLASS("_TtC7FaceKit15FKAvatarManager")
@interface FKAvatarManager : NSObject

/// Returns the shared manager object.
+ (FKAvatarManager * __nonnull)currentManager;

/// The recommended way to install FaceKit into your APP is to place a call to +startWithAPIKey: in your -application:didFinishLaunchingWithOptions: or -applicationDidFinishLaunching: method.
+ (void)startWithAPIKey:(NSString * __null_unspecified)apiKey;
@end



/// An instance of the FKAvatarMotion class implements a motion on the avatar. You can use this class to motion, such as those you might let your avatar dancing.
SWIFT_CLASS("_TtC7FaceKit14FKAvatarMotion")
@interface FKAvatarMotion : NSObject <NSSecureCoding, NSCoding>

/// Returns an object initialized from data in a given unarchiver.
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the receiver using a given archiver.
- (void)encodeWithCoder:(NSCoder * __nonnull)aCoder;

/// Returns the class supports secure coding.
+ (BOOL)supportsSecureCoding;

/// Get the name of avatar's motion.
- (NSString * __nonnull)name;
@end

@class SCNNode;
@class NSData;


/// An FKAvatarObject object has a node of the avatar on a scene graph. You have to show the avatar, you need to add sceneNode in your scene. To modify style on the avatar, use methods of FKAvatarObject can immediately to update on the sceneNode.
///
/// Save an Avatar Object
///
/// FaceKit provides to save an avatar object to a file.
/// FaceKit objects support the <code>NSSecureCoding
/// </code> protocol.
/// Use the <code>NSKeyedArchiver
/// </code> class to serialize an avatar object and all its contents, and the <code>NSKeyedUnarchiver
/// </code> class to load an archived avatar object.
/// Archived avatar objects support all features of FaceKit.
SWIFT_CLASS("_TtC7FaceKit14FKAvatarObject")
@interface FKAvatarObject : NSObject <NSSecureCoding, NSCoding>

/// The node of the avatar on the scene graph.
@property (nonatomic, readonly, strong) SCNNode * __nonnull sceneNode;

/// The default camera shoots the avatar with full body.
@property (nonatomic, readonly, strong) SCNNode * __nonnull defaultCameraNode;

/// Get focused on the avatar's head of the camera.
@property (nonatomic, readonly, strong) SCNNode * __nonnull headCameraNode;

/// Returns an object initialized from data in a given unarchiver.
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Encodes the receiver using a given archiver.
- (void)encodeWithCoder:(NSCoder * __nonnull)aCoder;

/// Returns the class supports secure coding.
+ (BOOL)supportsSecureCoding;

/// Changes clothes at the avatar.
- (void)setClothes:(FKAvatarClothes * __null_unspecified)clothes;

/// Changes motion at the avatar.
- (void)setMotion:(FKAvatarMotion * __null_unspecified)animation;

/// Changes hair at the avatar.
- (void)setHair:(FKAvatarHair * __null_unspecified)hair;

/// Changes glasses at the avatar.
- (void)setGlasses:(FKAvatarGlasses * __nullable)glasses;

/// Changes facial at the avatar. We have more basic facial, the respective weight into the array where you can make the avatar show different facials. The weight range is 0-1.
- (void)setFacial:(NSArray<NSNumber *> * __nonnull)weights;
- (void)saveAndPlayVoice:(NSData * __nonnull)wavFileData willPlayClosure:(void (^ __nullable)(void))willPlayClosure completion:(void (^ __nullable)(BOOL))completion;
- (void)playLastVoice:(void (^ __nullable)(BOOL))completion;
@end


@interface SCNGeometry (SWIFT_EXTENSION(FaceKit))
@end


@interface SCNScene (SWIFT_EXTENSION(FaceKit))
@end

#pragma clang diagnostic pop
